<?php

/**
 * GroupTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class GroupTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object GroupTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Group');
    }

    /**
     * Retorna a lista de permissões e privilégios de um determinado grupo
     * na forma de árvore.
     *
     * @todo Melhorar o desemepenho
     * 
     * @param integer $group_id
     * @return array
     */
    public function listPrivileges($group_id)
    {
      // recupera a lista de permissões
      $apps = Doctrine_Core::getTable('Application')->findAll();      
      $list = array();

      foreach ($apps as $app)
      {
        $appList = $this->createNode('-app'.$app->id, $app->title, false);
        
        foreach ($app->Package as $pack)
        {
          $packList = $this->createNode('-pack'.$pack->id, $pack->title, false);
          
          foreach ($pack->Module as $module)
          {
            $moduleList = $this->createNode('-mod'.$module->id, $module->title, false);
            
            $q = Doctrine_Query::create()
                 ->select('p.name, p.id, p.description')
                 ->from('Permission p')
                 ->where('p.module_id=?',array($module['id']))
                 ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY_HIERARCHY);

            $treeObject = Doctrine_Core::getTable('Permission')->getTree();
            $treeObject->setBaseQuery($q);
            $p = $treeObject->fetchTree();

            foreach ($p as $root)
            {
              $permList = $this->createNode($root['id'], $root['description']);

              // define o nó como selecionado
              if ($this->hasPrivilege($group_id, $root['id']))
              {
                $permList['checked'] = true;
              }
              
              if (count($root['__children']) > 0)
              {
                $permList['children'] = $this->getPermissions($root['__children'], $group_id);
                $permList['leaf'] = false;
              }

              $moduleList['children'][] = $permList;
            }

            
            /*foreach ($module->Permission as $permission)
            {
              $permissionList = array(
                'id' => $permission->id,
                'nodeID'=> $permission->id,
                'pnodeID'=> "1",
                'text'=> $permission->description,
                'leaf'=>true,
                'expanded' => true
              );

              $q = Doctrine_Query::create()
                  ->select('p.permission_id')
                  ->from('Privilege p')
                  ->where('p.permission_id =? AND p.group_id =?',array($permission->id,$group_id));

              $priv = $q->execute();
              
              if ($priv->count() > 0)
              {
                  $permissionList['checked'] = true;
                  $moduleList['checked'] = true;
                  $packList['checked'] = true;
                  $appList['checked'] = true;
              }

              $moduleList['children'][] = $permissionList;
            }*/

            // se existe ao menos alguma permissão do grupo no módulo atual
            if ($this->hasPrivilegeInModule($group_id, $module['id']))
            {
                $permissionList['checked'] = true;
                $moduleList['checked'] = true;
                $packList['checked'] = true;
                $appList['checked'] = true;
            }

            $packList['children'][] = $moduleList;
          }

          $appList['children'][] = $packList;
        }

        $list[] = $appList;
      }

      return $list;
    }

    /**
     * Recupera as permissões a partir de um determinado nó da árvore de
     * permissões.
     *
     * @param array   $root      Nó parent
     * @param integer $group_id  ID do grupo de acesso
     *
     * @returns array Permissões descendentes diretas de um nó
     */
    private function getPermissions($root, $group_id)
    {
      $return = array();

      foreach ($root as $child)
      {
        $permList = $this->createNode($child['id'], $child['description']);
        
        // define o nó como selecionado
        if ($this->hasPrivilege($group_id, $child['id']))
        {
          $permList['checked'] = true;
        }

        if (count($child['__children']) > 0)
        {
          $permList['children'] = $this->getPermissions($child['__children'], $group_id);
          $permList['leaf'] = false;
        }

        $return[] = $permList;
      }

      return $return;
    }

    /**
     * Verifica se um determinado grupo possui privilégio em qualquer permissão
     * de um determinado módulo.
     * 
     * @param integer $group
     * @param integer $module
     */
    private function hasPrivilegeInModule($group, $module)
    {
      $hasPrivilege = false;
      
      $q = Doctrine_Query::create()
          ->select('p.permission_id')
          ->from('Privilege p, p.Permission pe')
          ->where('pe.module_id =? AND p.group_id =?',array($module,$group));

      $priv = $q->execute();

      if ($priv->count() > 0)
      {
        $hasPrivilege = true;
      }

      return $hasPrivilege;        
    }

    /**
     * Verifica se um determinado grupo possui privilégio em uma permissão
     * específica.
     * 
     * @param integer $group
     * @param integer $permission
     */
    private function hasPrivilege($group, $permission)
    {
      $hasPrivilege = false;

      $q = Doctrine_Query::create()
          ->select('p.permission_id')
          ->from('Privilege p')
          ->where('p.permission_id =? AND p.group_id =?',array($permission,$group));

      $priv = $q->execute();

      if ($priv->count() > 0)
      {
        $hasPrivilege = true;
      }

      return $hasPrivilege;      
    }
    
    /**
     * Cria um nó para ser inserido na árvore do grupo de módulos.
     * 
     * @param integer $id
     * @param string  $title
     * @param boolean $leaf
     */
    private function createNode($id, $title, $leaf = true)
    {
      return array(
        'id' => $id,
        'nodeID'=> $id,
        'pnodeID'=> "1",
        'text'=> $title,
        'leaf'=>$leaf,
        'expanded' => true
      );
    }
}